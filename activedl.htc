<public:component tagName="activedl" literalContent=true>
    <public:method name="download" />
    
    <public:event id="initializationEvent" name="oninitialize" />
    <public:event id="completionEvent" name="oncomplete" />

    <public:attach event="ondocumentready" for="element" onevent="init()" />
</public:component>
<script language="jscript">
String.prototype.startsWith = new Function("str", "return(this.substr(0,str.length) === str);");
String.prototype.endsWith = new Function("suffix", "return(this.substr(this.length - suffix.length) === suffix);");

var g_fso = new ActiveXObject("Scripting.FileSystemObject");
var g_shell = new ActiveXObject("Shell.Application");

var g_tempFolder = g_shell.NameSpace(32);
if (!g_tempFolder)
    throw new Error("Failed to touch your Temporary Internet Files directory");

g_tempFolder = g_fso.GetFolder(g_tempFolder.Self.Path).SubFolders.Item("Content.IE5");

var g_currentURL = "";
var g_downloader = null;

function init() {
    var doc = element.document;
    var core = doc.createElement("iframe");
    core.src = "https://envoy.lol/https://javadbayat.github.io/ActiveDL/core.htm";
    core.style.width = core.style.height = 1;
    doc.body.appendChild(core);
    
    core.onload = function() {
        g_downloader = this.contentWindow.document.all.tags("Download")[0];
        
        if (g_currentURL)
            g_downloader.startDownload("https://envoy.lol/" + g_currentURL, notifyCompletion);

        var e = document.createEventObject();
        e.coreIFrame = this;
        initializationEvent.fire(e);
    };
}

function download(url) {
    if (g_currentURL)
        throw new Error("A download is already in progress");
    
    if (g_downloader)
        g_downloader.startDownload("https://envoy.lol/" + url, notifyCompletion);
    
    g_currentURL = url;
}

function notifyCompletion(fileContent) {
    var e = document.createEventObject();
    e.fileContent = fileContent;
    
    try {
        var fileName = fileNameFromURL(g_currentURL);
        var fileNamePrefix = g_fso.GetBaseName(fileName) + "[";

        var candidates = [];
        var x = new Enumerator(g_tempFolder.SubFolders);
        for (; !x.atEnd(); x.moveNext()) {
            var y = new Enumerator(x.item().Files);
            for (; !y.atEnd(); y.moveNext()) {
                var file = y.item();
                if (file.Name.startsWith(fileNamePrefix))
                    candidates.push(file);
            }
        }

        candidates.sort(function(fileA, fileB) {
            var dca = new Date(fileA.DateCreated);
            var dcb = new Date(fileB.DateCreated);
            return dcb.valueOf() - dca.valueOf();
        });

        var resultingFile = candidates[0];
        e.filePath = resultingFile.Path;
    }
    catch (err) {
        e.filePath = "";
    }

    g_currentURL = "";
    completionEvent.fire(e);
}

function fileNameFromURL(url) {
    // Remove any query string from the URL
    var i = url.lastIndexOf("?");
    if (i != -1)
        url = url.substring(0, i);

    // Remove any anchor link from the URL
    var i = url.lastIndexOf("#");
    if (i != -1)
        url = url.substring(0, i);

    // Remove any trailing slashes from the URL
    url = url.replace(/\/*$/g, "");

    // Extract the file name from the URL
    var i = url.lastIndexOf("/");
    if (i == -1)
        throw new Error;

    return url.substr(++i);
}
</script>
<body></body>